/* tslint:disable */
/* eslint-disable */
/**
 * AivisSpeech Engine
 * AivisSpeech の音声合成エンジンです。
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AivmManifestSpeakerStyle } from './AivmManifestSpeakerStyle';
import {
    AivmManifestSpeakerStyleFromJSON,
    AivmManifestSpeakerStyleFromJSONTyped,
    AivmManifestSpeakerStyleToJSON,
} from './AivmManifestSpeakerStyle';

/**
 * AIVM マニフェストの話者情報
 * @export
 * @interface AivmManifestSpeaker
 */
export interface AivmManifestSpeaker {
    /**
     * 
     * @type {string}
     * @memberof AivmManifestSpeaker
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof AivmManifestSpeaker
     */
    icon: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AivmManifestSpeaker
     */
    supportedLanguages: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AivmManifestSpeaker
     */
    uuid: string;
    /**
     * 
     * @type {number}
     * @memberof AivmManifestSpeaker
     */
    localId: number;
    /**
     * 
     * @type {Array<AivmManifestSpeakerStyle>}
     * @memberof AivmManifestSpeaker
     */
    styles: Array<AivmManifestSpeakerStyle>;
}

/**
 * Check if a given object implements the AivmManifestSpeaker interface.
 */
export function instanceOfAivmManifestSpeaker(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "icon" in value;
    isInstance = isInstance && "supportedLanguages" in value;
    isInstance = isInstance && "uuid" in value;
    isInstance = isInstance && "localId" in value;
    isInstance = isInstance && "styles" in value;

    return isInstance;
}

export function AivmManifestSpeakerFromJSON(json: any): AivmManifestSpeaker {
    return AivmManifestSpeakerFromJSONTyped(json, false);
}

export function AivmManifestSpeakerFromJSONTyped(json: any, ignoreDiscriminator: boolean): AivmManifestSpeaker {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'icon': json['icon'],
        'supportedLanguages': json['supported_languages'],
        'uuid': json['uuid'],
        'localId': json['local_id'],
        'styles': ((json['styles'] as Array<any>).map(AivmManifestSpeakerStyleFromJSON)),
    };
}

export function AivmManifestSpeakerToJSON(value?: AivmManifestSpeaker | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'icon': value.icon,
        'supported_languages': value.supportedLanguages,
        'uuid': value.uuid,
        'local_id': value.localId,
        'styles': ((value.styles as Array<any>).map(AivmManifestSpeakerStyleToJSON)),
    };
}

