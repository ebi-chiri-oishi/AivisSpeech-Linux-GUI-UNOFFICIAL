/* tslint:disable */
/* eslint-disable */
/**
 * AivisSpeech Engine
 * AivisSpeech の音声合成エンジンです。
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AivmManifestSpeaker } from './AivmManifestSpeaker';
import {
    AivmManifestSpeakerFromJSON,
    AivmManifestSpeakerFromJSONTyped,
    AivmManifestSpeakerToJSON,
} from './AivmManifestSpeaker';
import type { ModelArchitecture } from './ModelArchitecture';
import {
    ModelArchitectureFromJSON,
    ModelArchitectureFromJSONTyped,
    ModelArchitectureToJSON,
} from './ModelArchitecture';
import type { ModelFormat } from './ModelFormat';
import {
    ModelFormatFromJSON,
    ModelFormatFromJSONTyped,
    ModelFormatToJSON,
} from './ModelFormat';

/**
 * AIVM マニフェストのスキーマ 
 * @export
 * @interface AivmManifest
 */
export interface AivmManifest {
    /**
     * 
     * @type {string}
     * @memberof AivmManifest
     */
    manifestVersion: AivmManifestManifestVersionEnum;
    /**
     * 
     * @type {string}
     * @memberof AivmManifest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof AivmManifest
     */
    description?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AivmManifest
     */
    creators?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AivmManifest
     */
    license?: string | null;
    /**
     * 
     * @type {ModelArchitecture}
     * @memberof AivmManifest
     */
    modelArchitecture: ModelArchitecture;
    /**
     * 
     * @type {ModelFormat}
     * @memberof AivmManifest
     */
    modelFormat: ModelFormat;
    /**
     * 
     * @type {number}
     * @memberof AivmManifest
     */
    trainingEpochs?: number | null;
    /**
     * 
     * @type {number}
     * @memberof AivmManifest
     */
    trainingSteps?: number | null;
    /**
     * 
     * @type {string}
     * @memberof AivmManifest
     */
    uuid: string;
    /**
     * 
     * @type {string}
     * @memberof AivmManifest
     */
    version: string;
    /**
     * 
     * @type {Array<AivmManifestSpeaker>}
     * @memberof AivmManifest
     */
    speakers: Array<AivmManifestSpeaker>;
}


/**
 * @export
 */
export const AivmManifestManifestVersionEnum = {
    _10: '1.0'
} as const;
export type AivmManifestManifestVersionEnum = typeof AivmManifestManifestVersionEnum[keyof typeof AivmManifestManifestVersionEnum];


/**
 * Check if a given object implements the AivmManifest interface.
 */
export function instanceOfAivmManifest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "manifestVersion" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "modelArchitecture" in value;
    isInstance = isInstance && "modelFormat" in value;
    isInstance = isInstance && "uuid" in value;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "speakers" in value;

    return isInstance;
}

export function AivmManifestFromJSON(json: any): AivmManifest {
    return AivmManifestFromJSONTyped(json, false);
}

export function AivmManifestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AivmManifest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'manifestVersion': json['manifest_version'],
        'name': json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'creators': !exists(json, 'creators') ? undefined : json['creators'],
        'license': !exists(json, 'license') ? undefined : json['license'],
        'modelArchitecture': ModelArchitectureFromJSON(json['model_architecture']),
        'modelFormat': ModelFormatFromJSON(json['model_format']),
        'trainingEpochs': !exists(json, 'training_epochs') ? undefined : json['training_epochs'],
        'trainingSteps': !exists(json, 'training_steps') ? undefined : json['training_steps'],
        'uuid': json['uuid'],
        'version': json['version'],
        'speakers': ((json['speakers'] as Array<any>).map(AivmManifestSpeakerFromJSON)),
    };
}

export function AivmManifestToJSON(value?: AivmManifest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'manifest_version': value.manifestVersion,
        'name': value.name,
        'description': value.description,
        'creators': value.creators,
        'license': value.license,
        'model_architecture': ModelArchitectureToJSON(value.modelArchitecture),
        'model_format': ModelFormatToJSON(value.modelFormat),
        'training_epochs': value.trainingEpochs,
        'training_steps': value.trainingSteps,
        'uuid': value.uuid,
        'version': value.version,
        'speakers': ((value.speakers as Array<any>).map(AivmManifestSpeakerToJSON)),
    };
}

