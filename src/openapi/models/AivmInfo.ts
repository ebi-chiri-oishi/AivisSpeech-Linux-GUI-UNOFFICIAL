/* tslint:disable */
/* eslint-disable */
/**
 * AivisSpeech Engine
 * AivisSpeech の音声合成エンジンです。
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AivmManifest } from './AivmManifest';
import {
    AivmManifestFromJSON,
    AivmManifestFromJSONTyped,
    AivmManifestToJSON,
} from './AivmManifest';
import type { LibrarySpeaker } from './LibrarySpeaker';
import {
    LibrarySpeakerFromJSON,
    LibrarySpeakerFromJSONTyped,
    LibrarySpeakerToJSON,
} from './LibrarySpeaker';

/**
 * AIVM (Aivis Voice Model) 仕様に準拠した音声合成モデルのメタデータ情報。
 * 
 * AIVM マニフェストには、音声合成モデルに関連する全てのメタデータが含まれる。
 * speakers フィールド内の話者情報は、VOICEVOX ENGINE との API 互換性のために、
 * AIVM マニフェストを基に Speaker / SpeakerStyle / SpeakerInfo / StyleInfo モデルに変換したもの。
 * @export
 * @interface AivmInfo
 */
export interface AivmInfo {
    /**
     * 
     * @type {boolean}
     * @memberof AivmInfo
     */
    isLoaded: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AivmInfo
     */
    isUpdateAvailable: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AivmInfo
     */
    isPrivateModel: boolean;
    /**
     * 
     * @type {string}
     * @memberof AivmInfo
     */
    latestVersion: string;
    /**
     * 
     * @type {string}
     * @memberof AivmInfo
     */
    filePath: string;
    /**
     * 
     * @type {number}
     * @memberof AivmInfo
     */
    fileSize: number;
    /**
     * 
     * @type {AivmManifest}
     * @memberof AivmInfo
     */
    manifest: AivmManifest;
    /**
     * 
     * @type {Array<LibrarySpeaker>}
     * @memberof AivmInfo
     */
    speakers: Array<LibrarySpeaker>;
}

/**
 * Check if a given object implements the AivmInfo interface.
 */
export function instanceOfAivmInfo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "isLoaded" in value;
    isInstance = isInstance && "isUpdateAvailable" in value;
    isInstance = isInstance && "isPrivateModel" in value;
    isInstance = isInstance && "latestVersion" in value;
    isInstance = isInstance && "filePath" in value;
    isInstance = isInstance && "fileSize" in value;
    isInstance = isInstance && "manifest" in value;
    isInstance = isInstance && "speakers" in value;

    return isInstance;
}

export function AivmInfoFromJSON(json: any): AivmInfo {
    return AivmInfoFromJSONTyped(json, false);
}

export function AivmInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AivmInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'isLoaded': json['is_loaded'],
        'isUpdateAvailable': json['is_update_available'],
        'isPrivateModel': json['is_private_model'],
        'latestVersion': json['latest_version'],
        'filePath': json['file_path'],
        'fileSize': json['file_size'],
        'manifest': AivmManifestFromJSON(json['manifest']),
        'speakers': ((json['speakers'] as Array<any>).map(LibrarySpeakerFromJSON)),
    };
}

export function AivmInfoToJSON(value?: AivmInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'is_loaded': value.isLoaded,
        'is_update_available': value.isUpdateAvailable,
        'is_private_model': value.isPrivateModel,
        'latest_version': value.latestVersion,
        'file_path': value.filePath,
        'file_size': value.fileSize,
        'manifest': AivmManifestToJSON(value.manifest),
        'speakers': ((value.speakers as Array<any>).map(LibrarySpeakerToJSON)),
    };
}

